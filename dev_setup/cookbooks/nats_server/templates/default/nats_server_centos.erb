#! /bin/sh
### BEGIN INIT INFO
# Provides:          nats_server
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Starts the nats message bus server
### END INIT INFO

# Author: VMware
PATH=<%= File.join(node[:ruby][:path], "bin") %>:/sbin:/usr/sbin:/bin:/usr/bin

DESC="nats-server"
NAME=nats-server
DAEMON_NAME=nats-server
DAEMON=<%= File.join(node[:ruby][:path], "bin", "nats-server") %>
DAEMON_ARGS="-d -c <%= node[:nats_server][:config] %>"

PIDFILE=/var/run/nats_server.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -r /lib/init/vars.sh ] && . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $DAEMON_NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    start-stop-daemon --stop --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $DAEMON_NAME
    return 0
}

case "$1" in
  start)
    do_start
    case "$?" in
        0|1) success; echo ;;
        2) failure; echo ;;
    esac
    ;;
  stop)
    do_stop
    case "$?" in
        0|1) success; echo ;;
        2) failure; echo ;;
    esac
    ;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) success; echo ;;
            1) failure; echo ;; # Old process is still running
            *) failure; echo;; # Failed to start
        esac
        ;;
      *)
          # Failed to stop
        failure; echo
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
